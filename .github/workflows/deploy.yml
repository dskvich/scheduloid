name: Deploy

on:
  push:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker image tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short,prefix=

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Notify Build Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALERT_TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.ALERT_TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ‚ùå *Build Failed*
            üì¶ Service: `${{ env.IMAGE_NAME }}`
            üîó [Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Logging into the Container Registry..."
            docker login -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }} ${{ env.REGISTRY }}
            
            IMAGE_TAG=${{ needs.build.outputs.tags }}
            
            echo "Pulling image: $IMAGE_TAG"
            docker pull $IMAGE_TAG || { echo "Failed to pull Docker image."; exit 1; }
            
            docker stop ${{ env.IMAGE_NAME }} || echo "No existing container to stop."
            docker rm ${{ env.IMAGE_NAME }} || echo "No existing container to remove."
            docker network create my-network || echo "Network already exists."

            echo "Starting a new container..."
            docker run --detach \
              --name ${{ env.IMAGE_NAME }} \
              --env DATABASE_URL=${{ vars.DATABASE_URL }} \
              --env TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} \
              --env TELEGRAM_AUTHORIZED_USER_IDS="${{ vars.TELEGRAM_AUTHORIZED_USER_IDS }}" \
              -p 127.0.0.1:9999:8080 \
              --network my-network \
              $IMAGE_TAG
            
            echo "Waiting for the container to start"
            RETRY=5
            while [ $RETRY -gt 0 ]; do
              if docker ps | grep -q ${{ env.IMAGE_NAME }}; then
                echo "Container ${{ env.IMAGE_NAME }} started successfully."
                break
              else
                ((RETRY--))
                echo "Retries left: $RETRY"
                sleep 5
              fi
            done

            if [ $RETRY -eq 0 ]
            then
              echo "Container ${{ env.IMAGE_NAME }} failed to start."
              exit 1
            fi

      - name: Extract Revision ID
        id: extract_revision
        run: echo "::set-output name=revision::$(echo '${{ needs.build.outputs.tags }}' | awk -F':' '{print $NF}')"

      - name: Get Commit Message
        id: commit
        run: echo "::set-output name=message::${{ github.event.head_commit.message }}"

      - name: Notify Deploy Success
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALERT_TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.ALERT_TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ‚úÖ *Deploy Success*
            üì¶ Service: `${{ env.IMAGE_NAME }}`
            üîñ Revision: `${{ steps.extract_revision.outputs.revision }}`
            üìù Release Notes: `${{ steps.commit.outputs.message }}`

      - name: Notify Deploy Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.ALERT_TELEGRAM_CHANNEL_ID }}
          token: ${{ secrets.ALERT_TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ‚ùå *Deploy Failed*
            üì¶ Service: `${{ env.IMAGE_NAME }}`
            üîó [Details](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})